#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Jul 20, 2021 08:53:38 PM +07  platform: Windows NT

import sys

from time import strftime
from datetime import date, datetime
from tkinter.colorchooser import askcolor
from playsound import playsound
from tkinter import messagebox

try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk

try:
	import ttk
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	py3 = True

import DigitalClock_GUI_support

def vp_start_gui():
	'''Starting point when module is the main routine.'''
	global val, w, root
	root = tk.Tk()
	DigitalClock_GUI_support.set_Tk_var()
	top = window (root)
	DigitalClock_GUI_support.init(root, top)
	root.mainloop()

w = None
def create_window(rt, *args, **kwargs):
	'''Starting point when module is imported by another module.
	   Correct form of call: 'create_window(root, *args, **kwargs)' .'''
	global w, w_win, root
	#rt = root
	root = rt
	w = tk.Toplevel (root)
	DigitalClock_GUI_support.set_Tk_var()
	top = window (w)
	DigitalClock_GUI_support.init(w, top, *args, **kwargs)
	return (w, top)

def destroy_window():
	global w
	w.destroy()
	w = None

class window:
	def __init__(self, top=None):
		'''This class configures and populates the toplevel window.
		top is the toplevel containing window.'''
		_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
		_fgcolor = '#000000'  # X11 color: 'black'
		_compcolor = '#d9d9d9' # X11 color: 'gray85'
		_ana1color = '#d9d9d9' # X11 color: 'gray85'
		_ana2color = '#ececec' # Closest X11 color: 'gray92'

		top.geometry("430x103+1090+674")
		top.minsize(120, 1)
		top.maxsize(1540, 825)
		top.resizable(1,  1)
		top.title("Digital Clock")
		top.configure(background="#d9d9d9")
		top.configure(highlightbackground="#d9d9d9")
		top.configure(highlightcolor="black")

		self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
		top.configure(menu = self.menubar)

		self.top = top
		self.top.protocol("WM_DELETE_WINDOW", self.on_closing)
		self.top.iconbitmap('icons8-digital-clock-96.ico')

		self.sub_menu = tk.Menu(top,
			activebackground="#ececec",
			activeborderwidth=1,
			activeforeground="#000000",
			background="#d9d9d9",
			borderwidth=1,
			disabledforeground="#a3a3a3",
			foreground="#000000",
			tearoff=0)
		self.menubar.add_cascade(menu=self.sub_menu,
			label="Hiển thị")
		self.sub_menu.add_command(
			label="Màu số...",
			command=self.change_forecolor)
		self.sub_menu.add_command(
			label="Màu nền...",
			command=self.change_backcolor)
		self.sub_menu.add_separator()
		self.sub_menu.add_radiobutton(
			value='12h',
			variable=DigitalClock_GUI_support.rbtnFormat,
			label="Định dạng 12h")
		self.sub_menu.add_radiobutton(
			value='24h',
			variable=DigitalClock_GUI_support.rbtnFormat,
			label="Định dạng 24h")
		self.sub_menu1 = tk.Menu(top,
			activebackground="#ececec",
			activeborderwidth=1,
			activeforeground="#000000",
			background="#d9d9d9",
			borderwidth=1,
			disabledforeground="#a3a3a3",
			foreground="#000000",
			tearoff=0)
		self.menubar.add_cascade(menu=self.sub_menu1,
			label="Thiết lập")
		self.sub_menu1.add_checkbutton(
			variable=DigitalClock_GUI_support.ckb_PlaySoundEvenTime,
			label="Phát âm thanh khi giờ chẵn")
		self.sub_menu1.add_separator()
		self.sub_menu1.add_command(
			label="Báo thức...")
		self.sub_menu12 = tk.Menu(top,
				activebackground="#ececec",
				activeborderwidth=1,
				activeforeground="#000000",
				background="#d9d9d9",
				borderwidth=1,
				disabledforeground="#a3a3a3",
				foreground="#000000",
				tearoff=0)
		self.menubar.add_cascade(menu=self.sub_menu12,
				label="Cài đặt")
		self.sub_menu12.add_command(
				label="Đặt về mặc định",
				command=self.set_default_settings)

		self.lbClock = tk.Label(top)
		self.lbClock.place(relx=0.0, rely=0.0, height=103, width=464)
		self.lbClock.configure(activebackground="#f9f9f9")
		self.lbClock.configure(activeforeground="black")
		self.lbClock.configure(background="#000000")
		self.lbClock.configure(disabledforeground="#a3a3a3")
		self.lbClock.configure(font=('Digital-7', 70))
		self.lbClock.configure(foreground="#ffffff")
		self.lbClock.configure(highlightbackground="#d9d9d9")
		self.lbClock.configure(highlightcolor="black")
		self.lbClock.configure(text='''00:00:00 AM''')
		self.lbClock.configure(anchor='w')
		self.lbClock.configure(justify='left')

		self.rbtn_Format = DigitalClock_GUI_support.rbtnFormat
		self.ckb_PlaySoundEvenTime = DigitalClock_GUI_support.ckb_PlaySoundEvenTime

		self.load_settings()
		self.show_time()

	def set_default_settings(self, active=True):
		if active:
			if not messagebox.askokcancel("Xác nhận", "Bạn có chắc muốn đặt về mặc định không?"):
				return
		self.lbClock.configure(background="#000000")
		self.lbClock.configure(foreground="#ffffff")
		self.rbtn_Format.set('12h')
		self.ckb_PlaySoundEvenTime.set(True)

	def check_even_time(self):
		now = datetime.now()
		if now.minute == now.second == 0:
			return True
		return False

	def show_time(self):
		if self.ckb_PlaySoundEvenTime.get() and self.check_even_time():
			playsound('sound/Loud-alarm-clock-sound.wav', block=False)
		format_value = self.rbtn_Format.get()
		current_time = strftime('%I:%M:%S %p') if format_value == '12h' else strftime('%H:%M:%S %p')
		self.lbClock.config(text=current_time)
		self.lbClock.after(1000, self.show_time)

	def change_forecolor(self):
		colors = askcolor(title='Chọn màu số')
		self.lbClock.configure(foreground=colors[1])

	def change_backcolor(self):
		colors = askcolor(title='Chọn màu nền')
		self.lbClock.configure(background=colors[1])

	def save_settings(self):
		settings = [
			f'foreground:{self.lbClock.cget("foreground")}\n',
			f'background:{self.lbClock.cget("background")}\n',
			f'time_format:{self.rbtn_Format.get()}\n',
			f'playsound_eventime:{self.ckb_PlaySoundEvenTime.get()}\n'
		]
		with open('settings.txt', 'w') as file:
			file.writelines(settings)

	def load_settings(self):
		settings = []
		try:
			with open('settings.txt', 'r') as file:
				settings = file.readlines()
			for s in settings:
				key, value = s.strip().split(':')
				if key == 'foreground':
					self.lbClock.config(foreground=value)
				elif key == 'background':
					self.lbClock.config(background=value)
				elif key == 'time_format':
					self.rbtn_Format.set(value)
				elif key == 'playsound_eventime':
					self.ckb_PlaySoundEvenTime.set(value)
		except:
			self.set_default_settings(active=True)

	def on_closing(self):
		if messagebox.askokcancel("Thoát", "Bạn có chắc muốn tắt đồng hồ không?"):
			self.save_settings()
			self.top.destroy()


if __name__ == '__main__':
	vp_start_gui()